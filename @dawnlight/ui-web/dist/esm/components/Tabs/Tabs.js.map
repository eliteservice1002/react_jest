{"version":3,"sources":["../../../../src/components/Tabs/Tabs.tsx"],"names":["classNames","React","useEffect","useRef","useState","Tab","Tabs","selectedIndex","onChange","className","children","props","hasNativeFocus","setHasNativeFocus","focusedIndex","setFocusedIndex","tabsRef","selectedLineElement","indicatorStyles","setIndicatorStyles","left","width","bottom","childrenCount","Children","count","tabsNode","current","selectedTabNode","offsetLeft","offsetWidth","handleKeyDown","e","key","desiredIndex","handleKeyUp","map","child","childIndex","isValidElement","type","elementChild","cloneElement","index","isFocused","tabsHaveNativeFocus","onKeyDown","onKeyUp","onMouseUp","onFocus","onBlur"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport React, { ReactElement, useEffect, useRef, useState } from 'react';\nimport { Tab, TabProps } from './Tab';\n\nexport interface TabsProps {\n  readonly selectedIndex: number;\n  readonly onChange: (index: number) => void;\n  readonly className?: string;\n}\n\nexport const Tabs: React.FC<TabsProps> = ({\n  selectedIndex,\n  onChange,\n  className,\n  children,\n  ...props\n}) => {\n  const [hasNativeFocus, setHasNativeFocus] = useState(false);\n  const [focusedIndex, setFocusedIndex] = useState(selectedIndex);\n  const tabsRef = useRef<HTMLDivElement>(null);\n  const selectedLineElement = useRef(null);\n  const [indicatorStyles, setIndicatorStyles] = useState<{\n    left: string;\n    width: string;\n    bottom: string;\n  }>({\n    left: '0',\n    width: '0',\n    bottom: '-2px',\n  });\n\n  const childrenCount = React.Children.count(children);\n\n  useEffect(() => {\n    const tabsNode = tabsRef.current;\n    const selectedTabNode = tabsNode.children[selectedIndex] as HTMLElement;\n\n    setIndicatorStyles({\n      left: selectedTabNode.offsetLeft + 'px',\n      width: selectedTabNode.offsetWidth + 'px',\n      bottom: '-2px',\n    });\n  }, [selectedIndex]);\n\n  const handleKeyDown: React.KeyboardEventHandler<HTMLButtonElement> = (e) => {\n    if (e.key === 'ArrowLeft') {\n      const desiredIndex = focusedIndex - 1;\n      setFocusedIndex(desiredIndex >= 0 ? desiredIndex : childrenCount - 1);\n    } else if (e.key === 'ArrowRight') {\n      const desiredIndex = focusedIndex + 1;\n      setFocusedIndex(desiredIndex < childrenCount ? desiredIndex : 0);\n    } else if (e.key === 'Home') {\n      setFocusedIndex(0);\n    } else if (e.key === 'End') {\n      setFocusedIndex(childrenCount - 1);\n    }\n  };\n\n  const handleKeyUp: React.KeyboardEventHandler<HTMLButtonElement> = (e) => {\n    if (e.key === 'Enter' || e.key === 'Space') {\n      onChange(focusedIndex);\n    }\n  };\n\n  return (\n    <div\n      ref={tabsRef}\n      className={classNames('relative flex flex-1 border-b border-subtle', className)}\n      role=\"tablist\"\n      {...props}\n    >\n      {React.Children.map(children, (child, childIndex) => {\n        if (React.isValidElement<TabProps>(child) && child.type === Tab) {\n          const elementChild: ReactElement<TabProps> = child;\n          return React.cloneElement(elementChild, {\n            selectedIndex: selectedIndex,\n            index: childIndex,\n            isFocused: focusedIndex === childIndex,\n            tabsHaveNativeFocus: hasNativeFocus,\n            onKeyDown: handleKeyDown,\n            onKeyUp: handleKeyUp,\n            onMouseUp: () => {\n              setFocusedIndex(childIndex);\n              onChange(childIndex);\n            },\n            onFocus: () => setHasNativeFocus(true),\n            onBlur: () => setHasNativeFocus(false),\n          });\n        }\n        return child;\n      })}\n      <div\n        ref={selectedLineElement}\n        className=\"absolute h-1 bg-accent transition-all\"\n        style={indicatorStyles}\n      ></div>\n    </div>\n  );\n};\n"],"file":"Tabs.js"}