{"version":3,"sources":["../../../../src/components/Button/Button.tsx"],"names":["React","createElement","classNames","Button","forwardRef","ref","variant","width","color","className","children","disabled","as","props","type","border","displayName"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqD,OAArD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAWA,OAAO,IAAMC,MAA6B,gBAAGH,KAAK,CAACI,UAAN,CAI3C,OAWEC,GAXF;AAAA,MACE;AACEC,IAAAA,OAAO,GAAG,MADZ;AAEEC,IAAAA,KAAK,GAAG,QAFV;AAGEC,IAAAA,KAHF;AAIEC,IAAAA,SAJF;AAKEC,IAAAA,QALF;AAMEC,IAAAA,QANF;AAOEC,IAAAA,EAAE,GAAG;AAPP,GADF;AAAA,MASOC,KATP;;AAAA,sBAaEZ,aAAa,CACXW,EADW;AAGTP,IAAAA,GAAG,EAAEA;AAHI,KAILO,EAAE,KAAK,QAAP,IAAmB;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAJd;AAKTL,IAAAA,SAAS,EAAEP,UAAU,CACnB,+BADmB,EAEnB;AACE,mCAA6BS,QAD/B;AAEE,wBAAkBL,OAAO,KAAK,MAFhC;AAGE,mBAAaA,OAAO,KAAK,QAAZ,IAAwBE,KAAK,KAAK,QAHjD;AAIE,wBAAkBF,OAAO,KAAK,QAAZ,IAAwBE,KAAK,KAAK,aAJtD;AAKE,uBAAiBF,OAAO,KAAK,UAAZ,IAA0BE,KAAK,KAAK,QALvD;AAME,uBAAiBF,OAAO,KAAK,UAAZ,IAA0BE,KAAK,KAAK,QANvD;AAOE,mBAAaF,OAAO,KAAK,MAAZ,IAAsBE,KAAK,KAAK,eAAhC,IAAmDA,KAAK,KAAK,aAP5E;AAQE,qBAAeF,OAAO,KAAK,QAAZ,IAAwBE,KAAK,KAAK,QARnD;AASE,2BAAqBA,KAAK,KAAK,eAAV,IAA6BA,KAAK,KAAK,aAT9D;AAUEO,MAAAA,MAAM,EAAET,OAAO,KAAK,UAVtB;AAWE,gBAAUC,KAAK,KAAK,QAXtB;AAYE,cAAQA,KAAK,KAAK;AAZpB,KAFmB,EAgBnBE,SAhBmB,CALZ;AAuBTE,IAAAA,QAAQ,EAAEA;AAvBD,KAwBNE,KAxBM,GA0BXH,QA1BW,CAbf;AAAA,CAJ2C,CAAtC;AA+CPP,MAAM,CAACa,WAAP,GAAqB,QAArB","sourcesContent":["import React, { createElement, HTMLAttributes } from 'react';\nimport classNames from 'classnames';\n\nexport interface ButtonProps extends HTMLAttributes<HTMLButtonElement | HTMLAnchorElement> {\n  readonly variant?: 'filled' | 'outlined' | 'bare';\n  readonly color?: 'accent' | 'subtle' | 'inverseSubtle' | 'accentLight';\n  readonly width?: 'shrink' | 'expand' | 'fixed';\n  readonly as?: 'a' | 'button';\n  readonly disabled?: boolean;\n  readonly href?: string;\n}\n\nexport const Button: React.FC<ButtonProps> = React.forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  ButtonProps\n>(\n  (\n    {\n      variant = 'bare',\n      width = 'shrink',\n      color,\n      className,\n      children,\n      disabled,\n      as = 'button',\n      ...props\n    },\n    ref\n  ) =>\n    createElement(\n      as,\n      {\n        ref: ref,\n        ...(as === 'button' && { type: 'button' }),\n        className: classNames(\n          'focus:outline-none focus:ring',\n          {\n            'opacity-50 cursor-default': disabled,\n            'rounded-sm p-3': variant !== 'bare',\n            'bg-accent': variant === 'filled' && color === 'accent',\n            'bg-accentLight': variant === 'filled' && color === 'accentLight',\n            'border-accent': variant === 'outlined' && color === 'accent',\n            'border-subtle': variant === 'outlined' && color === 'subtle',\n            'text-link': variant !== 'bare' && color !== 'inverseSubtle' && color !== 'accentLight',\n            'text-accent': variant !== 'filled' && color === 'accent',\n            'text-inverseBody1': color === 'inverseSubtle' || color === 'accentLight',\n            border: variant === 'outlined',\n            'w-full': width === 'expand',\n            'w-44': width === 'fixed',\n          },\n          className\n        ),\n        disabled: disabled,\n        ...props,\n      },\n      children\n    )\n);\n\nButton.displayName = 'Button';\n"],"file":"Button.js"}