{"version":3,"sources":["../../../../src/components/Select/Select.tsx"],"names":["React","Fragment","Listbox","Transition","formInputStylesDark","formInputStylesLight","ArrowDownIcon","classNames","Select","id","onChange","value","displayText","disabled","color","children","active","Children","map","child","isValidElement","cloneElement"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,mBAApC;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,4BAA1D;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAYA,OAAO,IAAMC,MAA6B,GAAG,QAQvC;AAAA,MARwC;AAC5CC,IAAAA,EAD4C;AAE5CC,IAAAA,QAF4C;AAG5CC,IAAAA,KAH4C;AAI5CC,IAAAA,WAJ4C;AAK5CC,IAAAA,QAL4C;AAM5CC,IAAAA,KAAK,GAAG,MANoC;AAO5CC,IAAAA;AAP4C,GAQxC;AACJ,sBACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAEJ,KAAhB;AAAuB,IAAA,QAAQ,EAAED,QAAjC;AAA2C,IAAA,QAAQ,EAAEG;AAArD,kBACE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,oBAAC,OAAD,CAAS,MAAT;AACE,IAAA,EAAE,EAAEJ,EADN;AAEE,IAAA,SAAS,EAAEF,UAAU,CACnB;AACE,OAACH,mBAAD,GAAuBU,KAAK,KAAK,MADnC;AAEE,OAACT,oBAAD,GAAwBS,KAAK,KAAK;AAFpC,KADmB,EAKnB,gHALmB;AAFvB,KAUGF,WAVH,eAWE,oBAAC,aAAD,OAXF,CADF,eAcE,oBAAC,UAAD;AACE,IAAA,EAAE,EAAEX,QADN;AAEE,IAAA,KAAK,EAAC,iCAFR;AAGE,IAAA,SAAS,EAAC,aAHZ;AAIE,IAAA,OAAO,EAAC;AAJV,kBAME,oBAAC,OAAD,CAAS,OAAT;AAAiB,IAAA,SAAS,EAAC;AAA3B,KACIe,MAAD,IACChB,KAAK,CAACiB,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA8BI,KAAD,IAAW;AACtC,sBAAInB,KAAK,CAACoB,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;AAC/B,0BAAOnB,KAAK,CAACqB,YAAN,CAAmBF,KAAnB,EAA0B;AAAEH,QAAAA;AAAF,OAA1B,CAAP;AACD;;AACD,WAAOG,KAAP;AACD,GALD,CAFJ,CANF,CAdF,CADF,CADF;AAoCD,CA7CM","sourcesContent":["import React, { Fragment } from 'react';\nimport { Listbox, Transition } from '@headlessui/react';\nimport { formInputStylesDark, formInputStylesLight } from '../../styles/common-styles';\nimport { ArrowDownIcon } from '../../icons';\nimport classNames from 'classnames';\n\nexport interface SelectProps {\n  readonly id: string;\n  readonly value: string;\n  readonly displayText: string;\n  readonly onChange: (value: string) => void;\n  readonly as?: React.ElementType;\n  readonly disabled?: boolean;\n  readonly color?: 'dark' | 'light';\n}\n\nexport const Select: React.FC<SelectProps> = ({\n  id,\n  onChange,\n  value,\n  displayText,\n  disabled,\n  color = 'dark',\n  children,\n}) => {\n  return (\n    <Listbox value={value} onChange={onChange} disabled={disabled}>\n      <div className=\"relative\">\n        <Listbox.Button\n          id={id}\n          className={classNames(\n            {\n              [formInputStylesDark]: color === 'dark',\n              [formInputStylesLight]: color === 'light',\n            },\n            'w-full flex justify-between focus:outline-none focus:ring disabled:opacity-50 disabled:cursor-default truncate'\n          )}\n        >\n          {displayText}\n          <ArrowDownIcon />\n        </Listbox.Button>\n        <Transition\n          as={Fragment}\n          leave=\"transition ease-in duration-100\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <Listbox.Options className=\"absolute z-10 w-full overflow-auto max-h-60 border border-darker bg-inverseBg shadow-lg rounded text-inverseBody1 focus:outline-none focus:ring\">\n            {(active) =>\n              React.Children.map(children, (child) => {\n                if (React.isValidElement(child)) {\n                  return React.cloneElement(child, { active });\n                }\n                return child;\n              })\n            }\n          </Listbox.Options>\n        </Transition>\n      </div>\n    </Listbox>\n  );\n};\n"],"file":"Select.js"}