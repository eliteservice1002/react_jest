{"version":3,"sources":["../../../../src/components/RadioButton/RadioButton.tsx"],"names":["classNames","React","useState","RadioChecked","RadioUnchecked","RadioButton","name","value","checked","className","props","isFocused","setIsFocused","handleFocus","e","type","ring"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,IAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,aAA7C;AAQA,OAAO,IAAMC,WAAuC,GAAG,QAMjD;AAAA,MANkD;AACtDC,IAAAA,IADsD;AAEtDC,IAAAA,KAFsD;AAGtDC,IAAAA,OAHsD;AAItDC,IAAAA;AAJsD,GAMlD;AAAA,MADDC,KACC;;AACJ,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;;AAEA,MAAMW,WAAgD,GAAIC,CAAD,IAAO;AAC9D,QAAIA,CAAC,CAACC,IAAF,KAAW,OAAf,EAAwB;AACtBH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAND;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGJ,OAAO,gBACN,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAER,UAAU,CAAC,0BAAD,EAA6B;AAAEgB,MAAAA,IAAI,EAAEL;AAAR,KAA7B;AAAnC,IADM,gBAGN,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEX,UAAU,CAAC,yBAAD,EAA4B;AAAEgB,MAAAA,IAAI,EAAEL;AAAR,KAA5B;AAArC,IAJJ,eAME;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAEL,IAFR;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,SAAS,EAAER,UAAU,CAAC,iCAAD,EAAoCS,SAApC,CALvB;AAME,IAAA,OAAO,EAAEI,WANX;AAOE,IAAA,MAAM,EAAEA;AAPV,KAQMH,KARN,EANF,CADF;AAmBD,CAnCM","sourcesContent":["import classNames from 'classnames';\nimport React, { FocusEventHandler, useState } from 'react';\nimport { RadioChecked, RadioUnchecked } from '../../icons';\n\nexport interface RadioButtonProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  readonly name: string;\n  readonly value: string;\n  readonly checked: boolean;\n}\n\nexport const RadioButton: React.FC<RadioButtonProps> = ({\n  name,\n  value,\n  checked,\n  className,\n  ...props\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleFocus: FocusEventHandler<HTMLInputElement> = (e) => {\n    if (e.type === 'focus') {\n      setIsFocused(true);\n    } else {\n      setIsFocused(false);\n    }\n  };\n  return (\n    <div className=\"relative\">\n      {checked ? (\n        <RadioChecked className={classNames('text-accent rounded-full', { ring: isFocused })} />\n      ) : (\n        <RadioUnchecked className={classNames('text-body2 rounded-full', { ring: isFocused })} />\n      )}\n      <input\n        type=\"radio\"\n        name={name}\n        value={value}\n        checked={checked}\n        className={classNames('opacity-0 absolute top-0 left-0', className)}\n        onFocus={handleFocus}\n        onBlur={handleFocus}\n        {...props}\n      />\n    </div>\n  );\n};\n"],"file":"RadioButton.js"}