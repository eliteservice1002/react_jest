{"version":3,"sources":["../../../../src/components/Button/Button.tsx"],"names":["Button","React","forwardRef","ref","variant","width","color","className","children","disabled","as","props","type","border","displayName"],"mappings":";;;;;AAAA;;AACA;;;;;;;;;;;;;;AAWO,IAAMA,MAA6B,gBAAGC,kBAAMC,UAAN,CAI3C,gBAWEC,GAXF;AAAA,0BAEIC,OAFJ;AAAA,MAEIA,OAFJ,6BAEc,MAFd;AAAA,wBAGIC,KAHJ;AAAA,MAGIA,KAHJ,2BAGY,QAHZ;AAAA,MAIIC,KAJJ,QAIIA,KAJJ;AAAA,MAKIC,SALJ,QAKIA,SALJ;AAAA,MAMIC,QANJ,QAMIA,QANJ;AAAA,MAOIC,QAPJ,QAOIA,QAPJ;AAAA,qBAQIC,EARJ;AAAA,MAQIA,EARJ,wBAQS,QART;AAAA,MASOC,KATP;;AAAA,sBAaE,0BACED,EADF;AAGIP,IAAAA,GAAG,EAAEA;AAHT,KAIQO,EAAE,KAAK,QAAP,IAAmB;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAJ3B;AAKIL,IAAAA,SAAS,EAAE,4BACT,+BADS,EAET;AACE,mCAA6BE,QAD/B;AAEE,wBAAkBL,OAAO,KAAK,MAFhC;AAGE,mBAAaA,OAAO,KAAK,QAAZ,IAAwBE,KAAK,KAAK,QAHjD;AAIE,wBAAkBF,OAAO,KAAK,QAAZ,IAAwBE,KAAK,KAAK,aAJtD;AAKE,uBAAiBF,OAAO,KAAK,UAAZ,IAA0BE,KAAK,KAAK,QALvD;AAME,uBAAiBF,OAAO,KAAK,UAAZ,IAA0BE,KAAK,KAAK,QANvD;AAOE,mBAAaF,OAAO,KAAK,MAAZ,IAAsBE,KAAK,KAAK,eAAhC,IAAmDA,KAAK,KAAK,aAP5E;AAQE,qBAAeF,OAAO,KAAK,QAAZ,IAAwBE,KAAK,KAAK,QARnD;AASE,2BAAqBA,KAAK,KAAK,eAAV,IAA6BA,KAAK,KAAK,aAT9D;AAUEO,MAAAA,MAAM,EAAET,OAAO,KAAK,UAVtB;AAWE,gBAAUC,KAAK,KAAK,QAXtB;AAYE,cAAQA,KAAK,KAAK;AAZpB,KAFS,EAgBTE,SAhBS,CALf;AAuBIE,IAAAA,QAAQ,EAAEA;AAvBd,KAwBOE,KAxBP,GA0BEH,QA1BF,CAbF;AAAA,CAJ2C,CAAtC;;;AA+CPR,MAAM,CAACc,WAAP,GAAqB,QAArB","sourcesContent":["import React, { createElement, HTMLAttributes } from 'react';\nimport classNames from 'classnames';\n\nexport interface ButtonProps extends HTMLAttributes<HTMLButtonElement | HTMLAnchorElement> {\n  readonly variant?: 'filled' | 'outlined' | 'bare';\n  readonly color?: 'accent' | 'subtle' | 'inverseSubtle' | 'accentLight';\n  readonly width?: 'shrink' | 'expand' | 'fixed';\n  readonly as?: 'a' | 'button';\n  readonly disabled?: boolean;\n  readonly href?: string;\n}\n\nexport const Button: React.FC<ButtonProps> = React.forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  ButtonProps\n>(\n  (\n    {\n      variant = 'bare',\n      width = 'shrink',\n      color,\n      className,\n      children,\n      disabled,\n      as = 'button',\n      ...props\n    },\n    ref\n  ) =>\n    createElement(\n      as,\n      {\n        ref: ref,\n        ...(as === 'button' && { type: 'button' }),\n        className: classNames(\n          'focus:outline-none focus:ring',\n          {\n            'opacity-50 cursor-default': disabled,\n            'rounded-sm p-3': variant !== 'bare',\n            'bg-accent': variant === 'filled' && color === 'accent',\n            'bg-accentLight': variant === 'filled' && color === 'accentLight',\n            'border-accent': variant === 'outlined' && color === 'accent',\n            'border-subtle': variant === 'outlined' && color === 'subtle',\n            'text-link': variant !== 'bare' && color !== 'inverseSubtle' && color !== 'accentLight',\n            'text-accent': variant !== 'filled' && color === 'accent',\n            'text-inverseBody1': color === 'inverseSubtle' || color === 'accentLight',\n            border: variant === 'outlined',\n            'w-full': width === 'expand',\n            'w-44': width === 'fixed',\n          },\n          className\n        ),\n        disabled: disabled,\n        ...props,\n      },\n      children\n    )\n);\n\nButton.displayName = 'Button';\n"],"file":"Button.js"}