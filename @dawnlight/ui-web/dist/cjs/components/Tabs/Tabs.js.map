{"version":3,"sources":["../../../../src/components/Tabs/Tabs.tsx"],"names":["Tabs","selectedIndex","onChange","className","children","props","hasNativeFocus","setHasNativeFocus","focusedIndex","setFocusedIndex","tabsRef","selectedLineElement","left","width","bottom","indicatorStyles","setIndicatorStyles","childrenCount","React","Children","count","tabsNode","current","selectedTabNode","offsetLeft","offsetWidth","handleKeyDown","e","key","desiredIndex","handleKeyUp","map","child","childIndex","isValidElement","type","Tab","elementChild","cloneElement","index","isFocused","tabsHaveNativeFocus","onKeyDown","onKeyUp","onMouseUp","onFocus","onBlur"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport React, { ReactElement, useEffect, useRef, useState } from 'react';\nimport { Tab, TabProps } from './Tab';\n\nexport interface TabsProps {\n  readonly selectedIndex: number;\n  readonly onChange: (index: number) => void;\n  readonly className?: string;\n}\n\nexport const Tabs: React.FC<TabsProps> = ({\n  selectedIndex,\n  onChange,\n  className,\n  children,\n  ...props\n}) => {\n  const [hasNativeFocus, setHasNativeFocus] = useState(false);\n  const [focusedIndex, setFocusedIndex] = useState(selectedIndex);\n  const tabsRef = useRef<HTMLDivElement>(null);\n  const selectedLineElement = useRef(null);\n  const [indicatorStyles, setIndicatorStyles] = useState<{\n    left: string;\n    width: string;\n    bottom: string;\n  }>({\n    left: '0',\n    width: '0',\n    bottom: '-2px',\n  });\n\n  const childrenCount = React.Children.count(children);\n\n  useEffect(() => {\n    const tabsNode = tabsRef.current;\n    const selectedTabNode = tabsNode.children[selectedIndex] as HTMLElement;\n\n    setIndicatorStyles({\n      left: selectedTabNode.offsetLeft + 'px',\n      width: selectedTabNode.offsetWidth + 'px',\n      bottom: '-2px',\n    });\n  }, [selectedIndex]);\n\n  const handleKeyDown: React.KeyboardEventHandler<HTMLButtonElement> = (e) => {\n    if (e.key === 'ArrowLeft') {\n      const desiredIndex = focusedIndex - 1;\n      setFocusedIndex(desiredIndex >= 0 ? desiredIndex : childrenCount - 1);\n    } else if (e.key === 'ArrowRight') {\n      const desiredIndex = focusedIndex + 1;\n      setFocusedIndex(desiredIndex < childrenCount ? desiredIndex : 0);\n    } else if (e.key === 'Home') {\n      setFocusedIndex(0);\n    } else if (e.key === 'End') {\n      setFocusedIndex(childrenCount - 1);\n    }\n  };\n\n  const handleKeyUp: React.KeyboardEventHandler<HTMLButtonElement> = (e) => {\n    if (e.key === 'Enter' || e.key === 'Space') {\n      onChange(focusedIndex);\n    }\n  };\n\n  return (\n    <div\n      ref={tabsRef}\n      className={classNames('relative flex flex-1 border-b border-subtle', className)}\n      role=\"tablist\"\n      {...props}\n    >\n      {React.Children.map(children, (child, childIndex) => {\n        if (React.isValidElement<TabProps>(child) && child.type === Tab) {\n          const elementChild: ReactElement<TabProps> = child;\n          return React.cloneElement(elementChild, {\n            selectedIndex: selectedIndex,\n            index: childIndex,\n            isFocused: focusedIndex === childIndex,\n            tabsHaveNativeFocus: hasNativeFocus,\n            onKeyDown: handleKeyDown,\n            onKeyUp: handleKeyUp,\n            onMouseUp: () => {\n              setFocusedIndex(childIndex);\n              onChange(childIndex);\n            },\n            onFocus: () => setHasNativeFocus(true),\n            onBlur: () => setHasNativeFocus(false),\n          });\n        }\n        return child;\n      })}\n      <div\n        ref={selectedLineElement}\n        className=\"absolute h-1 bg-accent transition-all\"\n        style={indicatorStyles}\n      ></div>\n    </div>\n  );\n};\n"],"file":"Tabs.js"}