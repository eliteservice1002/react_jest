{"version":3,"sources":["../../../../src/components/Select/Select.tsx"],"names":["Select","id","onChange","value","displayText","disabled","color","children","formInputStylesDark","formInputStylesLight","Fragment","active","React","Children","map","child","isValidElement","cloneElement"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAYO,IAAMA,MAA6B,GAAG,SAAhCA,MAAgC,OAQvC;AAAA;;AAAA,MAPJC,EAOI,QAPJA,EAOI;AAAA,MANJC,QAMI,QANJA,QAMI;AAAA,MALJC,KAKI,QALJA,KAKI;AAAA,MAJJC,WAII,QAJJA,WAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,wBAFJC,KAEI;AAAA,MAFJA,KAEI,2BAFI,MAEJ;AAAA,MADJC,QACI,QADJA,QACI;AACJ,sBACE,gCAAC,eAAD;AAAS,IAAA,KAAK,EAAEJ,KAAhB;AAAuB,IAAA,QAAQ,EAAED,QAAjC;AAA2C,IAAA,QAAQ,EAAEG;AAArD,kBACE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,gCAAC,eAAD,CAAS,MAAT;AACE,IAAA,EAAE,EAAEJ,EADN;AAEE,IAAA,SAAS,EAAE,2DAENO,iCAFM,IAEgBF,KAAK,KAAK,MAF1B,cAGNG,kCAHM,IAGiBH,KAAK,KAAK,OAH3B,gBAKT,gHALS;AAFb,KAUGF,WAVH,eAWE,gCAAC,oBAAD,OAXF,CADF,eAcE,gCAAC,kBAAD;AACE,IAAA,EAAE,EAAEM,eADN;AAEE,IAAA,KAAK,EAAC,iCAFR;AAGE,IAAA,SAAS,EAAC,aAHZ;AAIE,IAAA,OAAO,EAAC;AAJV,kBAME,gCAAC,eAAD,CAAS,OAAT;AAAiB,IAAA,SAAS,EAAC;AAA3B,KACG,UAACC,MAAD;AAAA,WACCC,kBAAMC,QAAN,CAAeC,GAAf,CAAmBP,QAAnB,EAA6B,UAACQ,KAAD,EAAW;AACtC,wBAAIH,kBAAMI,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;AAC/B,4BAAOH,kBAAMK,YAAN,CAAmBF,KAAnB,EAA0B;AAAEJ,UAAAA,MAAM,EAANA;AAAF,SAA1B,CAAP;AACD;;AACD,aAAOI,KAAP;AACD,KALD,CADD;AAAA,GADH,CANF,CAdF,CADF,CADF;AAoCD,CA7CM","sourcesContent":["import React, { Fragment } from 'react';\nimport { Listbox, Transition } from '@headlessui/react';\nimport { formInputStylesDark, formInputStylesLight } from '../../styles/common-styles';\nimport { ArrowDownIcon } from '../../icons';\nimport classNames from 'classnames';\n\nexport interface SelectProps {\n  readonly id: string;\n  readonly value: string;\n  readonly displayText: string;\n  readonly onChange: (value: string) => void;\n  readonly as?: React.ElementType;\n  readonly disabled?: boolean;\n  readonly color?: 'dark' | 'light';\n}\n\nexport const Select: React.FC<SelectProps> = ({\n  id,\n  onChange,\n  value,\n  displayText,\n  disabled,\n  color = 'dark',\n  children,\n}) => {\n  return (\n    <Listbox value={value} onChange={onChange} disabled={disabled}>\n      <div className=\"relative\">\n        <Listbox.Button\n          id={id}\n          className={classNames(\n            {\n              [formInputStylesDark]: color === 'dark',\n              [formInputStylesLight]: color === 'light',\n            },\n            'w-full flex justify-between focus:outline-none focus:ring disabled:opacity-50 disabled:cursor-default truncate'\n          )}\n        >\n          {displayText}\n          <ArrowDownIcon />\n        </Listbox.Button>\n        <Transition\n          as={Fragment}\n          leave=\"transition ease-in duration-100\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <Listbox.Options className=\"absolute z-10 w-full overflow-auto max-h-60 border border-darker bg-inverseBg shadow-lg rounded text-inverseBody1 focus:outline-none focus:ring\">\n            {(active) =>\n              React.Children.map(children, (child) => {\n                if (React.isValidElement(child)) {\n                  return React.cloneElement(child, { active });\n                }\n                return child;\n              })\n            }\n          </Listbox.Options>\n        </Transition>\n      </div>\n    </Listbox>\n  );\n};\n"],"file":"Select.js"}